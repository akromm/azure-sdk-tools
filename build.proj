<?xml version="1.0" encoding="utf-8"?>
<Project
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
  ToolsVersion="4.0"
  DefaultTargets="ForceRestorePackages;Clean;BuildDebug;BuildReleaseSigned;BuildSetupDebug">

  <!-- Define build properties -->
  <PropertyGroup>
    <ManagementCmdletBinDirectory>.\src\ServiceManagement\Services\Commands\bin</ManagementCmdletBinDirectory>
    <ManagementTestDirectory>.\src\ServiceManagement\Services\Commands.Test\bin</ManagementTestDirectory>
    <ManagementTestAssemblyName>Microsoft.WindowsAzure.Commands.Test.dll</ManagementTestAssemblyName>

    <TestSettings>.\src\Local.testsettings</TestSettings>
    <AzureRTTestSettings>.\src\AzureRT.testsettings</AzureRTTestSettings>
    <ScenarioTestDebug>.\src\Common\Commands.ScenarioTest\bin\Debug\Microsoft.WindowsAzure.Commands.ScenarioTest.dll</ScenarioTestDebug>
    <AzureRTTestContainer>.\src\ServiceManagement\Compute\Commands.ServiceManagement.Test\bin\Debug\Microsoft.WindowsAzure.Commands.ServiceManagement.Test.dll</AzureRTTestContainer>
    <StorageScenarioTestDebug>src\ServiceManagement\Storage\Commands.Storage.ScenarioTest\bin\Debug\CLITest.dll</StorageScenarioTestDebug>
    <ManagementTestDebug>.\src\ServiceManagement\Services\Commands.Test\bin\Debug\Microsoft.WindowsAzure.Commands.Test.dll</ManagementTestDebug>
    <ResourceManagerTestDebug>.\src\ResourceManager\Resources\Commands.Resources.Test\bin\Debug\Microsoft.Azure.Commands.Resources.Test.dll</ResourceManagerTestDebug>
    <ServiceManagementTestDebug>.\src\ServiceManagement\Compute\Commands.ServiceManagement.Test\bin\Debug\Microsoft.WindowsAzure.Commands.ServiceManagement.Test.dll</ServiceManagementTestDebug>
    <SqlDatabaseTestDebug>.\src\ServiceManagement\Sql\Commands.SqlDatabase.Test\bin\Debug\Microsoft.WindowsAzure.Commands.SqlDatabase.Test.dll</SqlDatabaseTestDebug>
    <HDInsightTestDebug>.\src\ServiceManagement\Services\Commands.HDInsight.Test\bin\Debug\Microsoft.WindowsAzure.Commands.HDInsight.Test.dll</HDInsightTestDebug>    
    <StorageTestDebug>.\src\ServiceManagement\Storage\Commands.Storage.Test\bin\Debug\Microsoft.WindowsAzure.Commands.Storage.Test.dll</StorageTestDebug>
    <SetupDirectory>.\setup\build</SetupDirectory>

    <PublishDirectory>.\src\Publish</PublishDirectory>
    <PackageDirectory>.\src\Package</PackageDirectory>
    <BuildOutputDirectory>$(PublishDirectory)\Build</BuildOutputDirectory>
    <SetupOutputDirectory>$(PublishDirectory)\Setup</SetupOutputDirectory>
    <TestFilter>"!Functional&#x26;!Scenario&#x26;!Sequential&#x26;!PIRTest&#x26;!Preview&#x26;!ADDomain"</TestFilter>
    <ScenarioTestFilter>All</ScenarioTestFilter>
    <MockTestFilter>CheckIn</MockTestFilter>
	<OneSDKCITFilter>"OneSDK&#x26;CIT"</OneSDKCITFilter>
	<AzureRTAllTestFilter>"Functional|Scenario"</AzureRTAllTestFilter>
	<AzureRTAllTestFilter2>"Functional|Scenario|Preview"</AzureRTAllTestFilter2>
	<AzureRTAllTestFilter3>"Functional|Scenario|Sequential"</AzureRTAllTestFilter3>
    <TestOutputDirectory>$(PublishDirectory)\TestResults</TestOutputDirectory>
	<DebugBuildConfig>Configuration=Debug;Platform=Any CPU</DebugBuildConfig>
	<ReleaseBuildConfig>Configuration=Release;Platform=Any CPU</ReleaseBuildConfig>
	<ReleaseSignedBuildConfig>Configuration=ReleaseSigned;Platform=Any CPU</ReleaseSignedBuildConfig>
	<TestName></TestName>
	<TestParams></TestParams>
  </PropertyGroup>
  <ItemGroup>
    <CmdletSln Include=".\src\AzurePowerShell.sln" />
    <SetupSln Include=".\setup\azurepowershell.sln" />
  </ItemGroup>

  <UsingTask 
    AssemblyFile="$(MSBuildProjectDirectory)\src\packages\xunit.1.9.2\lib\net20\xunit.runner.msbuild.dll"
    TaskName="Xunit.Runner.MSBuild.xunit" />
  
  <!-- Clean the build in all configurations -->
  <Target Name="Clean">
    <!-- Clean the solutions -->
    <Message Importance="high" Text="Cleaning Cmdlets..." ContinueOnError="false" />
    <MSBuild
      Projects="@(CmdletSln)"
      Targets="Clean"
      Properties="$(DebugBuildConfig)"
      ContinueOnError="false" />
    <MSBuild
      Projects="@(CmdletSln)"
      Targets="Clean"
      Properties="$(ReleaseSignedBuildConfig)"
      ContinueOnError="false" />
    <MSBuild
      Projects="@(SetupSln)"
      Targets="Clean"
      Properties="$(ReleaseBuildConfig)"
      ContinueOnError="false" />
	<MSBuild
      Projects="@(SetupSln)"
      Targets="Clean"
      Properties="$(DebugBuildConfig)"
      ContinueOnError="false" />

    <!-- Delete the publish files -->
    <Message Importance="high" Text="Cleaning publish files..." ContinueOnError="false" />
    <ItemGroup>
      <PublishFiles Include="$(PublishDirectory)\**\*.*" />
    </ItemGroup>
    <Delete
      Files="@(PublishFiles)"
      ContinueOnError="false" />
    <RemoveDir
      Directories="$(PublishDirectory)"
      ContinueOnError="false" />

	<!-- Delete the package files -->
    <Message Importance="high" Text="Cleaning package files..." ContinueOnError="false" />
    <ItemGroup>
      <PackageFiles Include="$(PackageDirectory)\**\*.*" />
    </ItemGroup>
    <Delete
      Files="@(PackageFiles)"
      ContinueOnError="false" />
    <RemoveDir
      Directories="$(PackageDirectory)"
      ContinueOnError="false" />
  </Target>
  
  <!--
  Force nuget package restore so that packages that include .targets files
  don't need to be checked into source control.
  -->
  <Target Name="ForceRestorePackages">
    <PropertyGroup>
	    <NuGetCommand>$(MSBuildProjectDirectory)\src\.nuget\NuGet.exe</NuGetCommand>
		<NuGetRestoreConfigFile>$(MSBuildProjectDirectory)\restore.config</NuGetRestoreConfigFile>
		<NuGetRestoreConfigSwitch>-ConfigFile &quot;$(NuGetRestoreConfigFile)&quot;</NuGetRestoreConfigSwitch>
    </PropertyGroup>
	
    <ItemGroup>
      <NuGetCache Include="$(LOCALAPPDATA)\NuGet\Cache\*.nupkg"/>
    </ItemGroup>

    <!-- Delete NuGet cache-->
    <Delete Files="@(NuGetCache)" />

    <!-- Create config for user name and password for private feed access -->
    <Delete Files="$(NuGetRestoreConfigFile)" />
	<WriteLinesToFile File="$(NuGetRestoreConfigFile)" Lines="&lt;configuration&gt;&lt;/configuration&gt;" Overwrite="true" Encoding="UTF-8" />
	<Exec Command="$(NuGetCommand) sources add -Name AzureSdkInternal -Source &quot;https://www.myget.org/F/azure-sdk-internal/&quot; $(NuGetRestoreConfigSwitch)" />
    <!-- Restore packages -->
	<Exec Command="$(NuGetCommand) restore $(MSBuildProjectDirectory)\src\AzurePowerShell.sln $(NuGetRestoreConfigSwitch)" ContinueOnError="ErrorAndContinue" />
	<!-- delete config file, don't want to leave passwords hanging around on the build server file system -->
    <Delete Files="$(NuGetRestoreConfigFile)" />
  </Target>

  <!-- Build all flavors of the Cmdlets -->
  <Target Name="BuildCmdlets" DependsOnTargets="ForceRestorePackages">
    <Message Importance="high" Text="Building Cmdlets..." />
    <MSBuild
      Projects="@(CmdletSln)"
      Targets="Build"
      Properties="$(DebugBuildConfig)"
      ContinueOnError="false" />
    <MSBuild
      Projects="@(CmdletSln)"
      Targets="Build"
      Properties="$(ReleaseSignedBuildConfig)"
      ContinueOnError="false" />
  </Target>

  <!-- Build the Setup -->
  <Target Name="BuildSetupDebug">
    <Message
      Importance="high"
      Text="Building Setup..."
      ContinueOnError="false" />
    <Message
      Importance="high"
      Text="You are required to have installed the WiX Toolset at http://wix.codeplex.com/releases/view/60102 (Wix35.msi)"
      ContinueOnError="false" />
    <MSBuild
      Projects="@(SetupSln)"
      Targets="Build"
      Properties="$(DebugBuildConfig)"
      ContinueOnError="false" />
  </Target>

  <!-- Build the Setup -->
  <Target Name="BuildSetup">
    <Message
      Importance="high"
      Text="Building Setup..."
      ContinueOnError="false" />
    <Message
      Importance="high"
      Text="You are required to have installed the WiX Toolset at http://wix.codeplex.com/releases/view/60102 (Wix35.msi)"
      ContinueOnError="false" />
    <MSBuild
      Projects="@(SetupSln)"
      Targets="Build"
      Properties="$(ReleaseBuildConfig)"
      ContinueOnError="false" />
  </Target>

  <!-- Build the Cmdlets and Setup in all configurations -->
  <Target Name="Build" DependsOnTargets="BuildCmdlets;BuildSetup" />

  <!-- Publish any build artificates to the Publish directory -->
  <Target Name="Publish" DependsOnTargets="Build">

    <!-- Copy code artifacts -->
    <Message Importance="high" Text="Publishing Cmdlets..." ContinueOnError="false" />
    <ItemGroup>
      <DebugFiles Include="$(CloudServiceCmdletBinDirectory)\Debug\**\*.*" />
	  <DebugFiles Include="$(ManagementCmdletBinDirectory)\Debug\**\*.*" />
      <DebugFiles Include="$(ServiceManagementCmdletBinDirectory)\Debug\**\*.*" />
      <ReleaseFiles Include="$(CloudServiceCmdletBinDirectory)\Release\**\*.*" />
	  <ReleaseFiles Include="$(ManagementCmdletBinDirectory)\Release\**\*.*" />
      <ReleaseFiles Include="$(ServiceManagementCmdletBinDirectory)\Release\**\*.*" />
    </ItemGroup>
    <MakeDir
      Directories="$(BuildOutputDirectory)"
      ContinueOnError="false" />
    <Copy
      SourceFiles="@(DebugFiles)"
      DestinationFiles="@(DebugFiles->'$(BuildOutputDirectory)\Debug\%(RecursiveDir)%(Filename)%(Extension)')"
      SkipUnchangedFiles="true"
      ContinueOnError="false" />
    <Copy
      SourceFiles="@(ReleaseFiles)"
      DestinationFiles="@(ReleaseFiles->'$(BuildOutputDirectory)\Release\%(RecursiveDir)%(Filename)%(Extension)')"
      SkipUnchangedFiles="true"
      ContinueOnError="false" />

    <!-- Copy the Setup artifacts -->
    <Message Importance="high" Text="Publishing Setup..." ContinueOnError="false" />
    <ItemGroup>
      <SetupFiles Include="$(SetupDirectory)\**\*.*" />
    </ItemGroup>
    <Copy
      SourceFiles="@(SetupFiles)"
      DestinationFiles="@(SetupFiles->'$(PublishDirectory)\Setup\%(RecursiveDir)%(Filename)%(Extension)')"
      SkipUnchangedFiles="true"
      ContinueOnError="false" />
  </Target>

  <!-- Run the unit tests -->
  <Target Name="Test" DependsOnTargets="BuildDebug">
    <Message Importance="high" Text="Running tests..." />
    <Message Importance="high" Text="You are required to have installed a version of Visual Studio with support for MSTest (and MSTest on your path)." />
    <MakeDir Directories="$(TestOutputDirectory)" ContinueOnError="false" />

    <Message Importance="high" Text="Debug tests:" />
    <CallTarget Targets="TestManagement; TestManagedCache; TestResourceManager; TestServiceManagement; TestSqlDatabase; TestStorage; MockedScenarioTests" />
  </Target>

  <Target Name="InvokeMSTest">
    <!--Remove existing test result; otherwsie mstest will error-->
    <Delete Files="$(_testResult)"/>
    <Exec
      Command="MSTest.exe /testcontainer:$(_testAssembly) /testsettings:$(_testSettings) /category:$(_testFilter) /resultsfile:$(_testResult)"
      ContinueOnError="false" />
  </Target>
  
  <Target Name="TestManagement">
    <MSBuild Targets="InvokeMSTest"
             Properties="_testAssembly=$(ManagementTestDebug);_testSettings=$(TestSettings);_testFilter=$(TestFilter);_testResult=$(TestOutputDirectory)\ManagementDebug.trx"
             Projects="build.proj"/>
  </Target>

  <Target Name="TestManagedCache">
    <PropertyGroup>
      <_ManagedCacheTestAssembly>.\src\ServiceManagement\ManagedCache\Commands.ManagedCache.Test\bin\Debug\Microsoft.Azure.Commands.ManagedCache.Test.dll</_ManagedCacheTestAssembly>
    </PropertyGroup>
    <Xunit.Runner.MSBuild.xunit Assembly="$(_ManagedCacheTestAssembly)" Html="$(TestOutputDirectory)\ManagedCache.xunit.dll.html" Verbose="true"/>
  </Target>
  
  <Target Name="TestResourceManager">
    <Xunit.Runner.MSBuild.xunit Assembly="$(ResourceManagerTestDebug)" Html="$(TestOutputDirectory)\ResourceManagerTestDebug.xunit.dll.html" Verbose="true"/>
  </Target>

  <Target Name="TestServiceManagement">
    <MSBuild Targets="InvokeMSTest"
             Properties="_testAssembly=$(ServiceManagementTestDebug);_testSettings=$(TestSettings);_testFilter=$(TestFilter);_testResult=$(TestOutputDirectory)\ServiceManagementDebug.trx"
             Projects="build.proj"/>
  </Target>

  <Target Name="TestSqlDatabase">
    <MSBuild Targets="InvokeMSTest" 
        Properties="_testAssembly=$(SqlDatabaseTestDebug);_testSettings=$(TestSettings);_testFilter=$(TestFilter);_testResult=$(TestOutputDirectory)\SqlDatabaseDebug.trx"
        Projects="build.proj"/>
  </Target>

  <Target Name="TestHDInsight">
    <MSBuild Targets="InvokeMSTest"
        Properties="_testAssembly=$(HDInsightTestDebug);_testSettings=$(TestSettings);_testFilter=$(TestFilter);_testResult=$(TestOutputDirectory)\HDInsightDebug.trx"
        Projects="build.proj"/>
  </Target>

  <Target Name="TestStorage">
    <MSBuild Targets="InvokeMSTest"
        Properties="_testAssembly=$(StorageTestDebug);_testSettings=$(TestSettings);_testFilter=$(TestFilter);_testResult=$(TestOutputDirectory)\StorageDebug.trx"
        Projects="build.proj"/>
  </Target>

  <!-- Run the scenario tests -->
  <Target Name="ScenarioTest" DependsOnTargets="Clean;BuildDebug">
    <Message Importance="high" Text="Running scenario tests..." />
    <Message Importance="high" Text="You are required to have installed a version of Visual Studio with support for MSTest (and MSTest on your path)." />
    <MakeDir Directories="$(TestOutputDirectory)" ContinueOnError="false" />

    <Message Importance="high" Text="Scenario tests:" />
    <MSBuild Targets="InvokeMSTest"
      Properties="_testAssembly=$(ScenarioTestDebug);_testSettings=$(TestSettings);_testFilter=$(ScenarioTestFilter);_testResult=$(TestOutputDirectory)\ScenarioTestDebug.trx"
      Projects="build.proj"/>
    <MSBuild Targets="InvokeMSTest"
      Properties="_testAssembly=$(StorageScenarioTestDebug);_testSettings=$(TestSettings);_testFilter=$(ScenarioTestFilter);_testResult=$(TestOutputDirectory)\StorageScenarioTestDebug.trx"
      Projects="build.proj"/>
  </Target>
  
  <!-- Run the scenario tests with Mocks -->
  <Target Name="MockedScenarioTests">
    <Message Importance="high" Text="Running scenario tests with Mocks" />
    <MSBuild Targets="InvokeMSTest" 
             Properties="_testAssembly=$(ScenarioTestDebug);_testSettings=$(TestSettings);_testFilter=$(MockTestFilter);_testResult=$(TestOutputDirectory)\MockedScenarioTests.trx" 
             Projects="build.proj"/>  
  </Target>

  <!-- Run the CITs -->
  <Target Name="RunOneSDKCIT" DependsOnTargets="Clean;BuildDebug">
    <Message Importance="high" Text="Running CITs..." />
    <Message Importance="high" Text="You are required to have installed a version of Visual Studio with support for MSTest (and MSTest on your path)." />
    <MakeDir Directories="$(TestOutputDirectory)" ContinueOnError="false" />

    <Message Importance="high" Text="Scenario tests:" />
    <Delete Files="$(TestOutputDirectory)\RunOneSDKCITDebug.trx" />
    <Exec
      Command="MSTest.exe /testcontainer:$(ScenarioTestDebug) /testsettings:$(TestSettings) /category:$(OneSDKCITFilter) /resultsfile:$(TestOutputDirectory)\RunOneSDKCITDebug.trx"
      ContinueOnError="false" />
  </Target>

  <!-- Run the AzureRT tests -->
  <Target Name="AzureRTBVTs" DependsOnTargets="Clean;BuildDebug">
    <Message Importance="high" Text="Running AzureRT BVT tests..." />
    <Message Importance="high" Text="You are required to have installed a version of Visual Studio with support for MSTest (and MSTest on your path)." />
    <MakeDir Directories="$(TestOutputDirectory)" ContinueOnError="false" />

    <Message Importance="high" Text="BVT tests:" />
    <Delete Files="$(TestOutputDirectory)\RTBVTDebug.trx" />
    <Exec
      Command="MSTest.exe /testcontainer:$(AzureRTTestContainer) /testsettings:$(TestSettings) /category:BVT /resultsfile:$(TestOutputDirectory)\RTBVTDebug.trx"
      ContinueOnError="false" />
  </Target>

  <Target Name="AzureRTOneTest" DependsOnTargets="Clean;BuildDebug">
    <Message Importance="high" Text="Running a specific tests..." />
    <Message Importance="high" Text="You are required to have installed a version of Visual Studio with support for MSTest (and MSTest on your path)." />
    <MakeDir Directories="$(TestOutputDirectory)" ContinueOnError="false" />

    <Message Importance="high" Text="Running tests:" />
    <Delete Files="$(TestOutputDirectory)\RTFunctionalDebug.trx" />
    <Exec
      Command="MSTest.exe /testcontainer:$(AzureRTTestContainer) /testsettings:$(TestSettings) /test:$(TestName) /resultsfile:$(TestOutputDirectory)\RTFunctionalDebug.trx"
      ContinueOnError="false" />
  </Target>

  <Target Name="AzureRTMultiTests" DependsOnTargets="Clean;BuildDebug">
    <Message Importance="high" Text="Running a specific tests..." />
    <Message Importance="high" Text="You are required to have installed a version of Visual Studio with support for MSTest (and MSTest on your path)." />
    <MakeDir Directories="$(TestOutputDirectory)" ContinueOnError="false" />

    <Message Importance="high" Text="Running tests:" />
    <Delete Files="$(TestOutputDirectory)\RTFunctionalDebug.trx" />
    <Exec
      Command="MSTest.exe /testcontainer:$(AzureRTTestContainer) /testsettings:$(TestSettings) $(TestParams) /resultsfile:$(TestOutputDirectory)\RTFunctionalDebug.trx"
      ContinueOnError="false" />
  </Target>

  <Target Name="AzureRTAll" DependsOnTargets="Clean;BuildDebug">
    <Message Importance="high" Text="Running AzureRT all tests..." />
    <Message Importance="high" Text="You are required to have installed a version of Visual Studio with support for MSTest (and MSTest on your path)." />
    <MakeDir Directories="$(TestOutputDirectory)" ContinueOnError="false" />

    <Message Importance="high" Text="All tests:" />
    <Delete Files="$(TestOutputDirectory)\RTDebug.trx" />
    <Exec
      Command="MSTest.exe /testcontainer:$(AzureRTTestContainer) /testsettings:$(TestSettings) /category:$(AzureRTAllTestFilter3) /resultsfile:$(TestOutputDirectory)\RTDebug.trx"
      ContinueOnError="false" />
  </Target>

  <Target Name="AzureRTAllFast" DependsOnTargets="Clean;BuildDebug">
    <Message Importance="high" Text="Running AzureRT all tests..." />
    <Message Importance="high" Text="You are required to have installed a version of Visual Studio with support for MSTest (and MSTest on your path)." />
    <MakeDir Directories="$(TestOutputDirectory)" ContinueOnError="false" />

    <Message Importance="high" Text="All tests:" />
    <Delete Files="$(TestOutputDirectory)\RTSequentialDebug.trx" />
    <Delete Files="$(TestOutputDirectory)\RTDebug.trx" />
    <Exec
      Command="MSTest.exe /testcontainer:$(AzureRTTestContainer) /testsettings:$(TestSettings) /category:Sequential /resultsfile:$(TestOutputDirectory)\RTSequentialDebug.trx"
      ContinueOnError="true" />
    <Exec
      Command="MSTest.exe /testcontainer:$(AzureRTTestContainer) /testsettings:$(AzureRTTestSettings) /category:$(AzureRTAllTestFilter) /resultsfile:$(TestOutputDirectory)\RTDebug.trx"
      ContinueOnError="false" />
  </Target>
  
  <Target Name="AzureRTAllPreview" DependsOnTargets="Clean;BuildDebug">
    <Message Importance="high" Text="Running AzureRT all tests..." />
    <Message Importance="high" Text="You are required to have installed a version of Visual Studio with support for MSTest (and MSTest on your path)." />
    <MakeDir Directories="$(TestOutputDirectory)" ContinueOnError="false" />

    <Message Importance="high" Text="All tests:" />
    <Delete Files="$(TestOutputDirectory)\RTAddVhdDebug.trx" />
    <Delete Files="$(TestOutputDirectory)\RTDebug.trx" />
	  <Exec
      Command="MSTest.exe /testcontainer:$(AzureRTTestContainer) /testsettings:$(TestSettings) /category:Sequential /resultsfile:$(TestOutputDirectory)\RTAddVhdDebug.trx"
      ContinueOnError="true" />
    <Exec
      Command="MSTest.exe /testcontainer:$(AzureRTTestContainer) /testsettings:$(AzureRTTestSettings) /category:$(AzureRTAllTestFilter2) /resultsfile:$(TestOutputDirectory)\RTDebug.trx"
      ContinueOnError="false" />
  </Target>
  
  <Target Name="AzureRTPreview" DependsOnTargets="Clean;BuildDebug">
    <Message Importance="high" Text="Running AzureRT all tests..." />
    <Message Importance="high" Text="You are required to have installed a version of Visual Studio with support for MSTest (and MSTest on your path)." />
    <MakeDir Directories="$(TestOutputDirectory)" ContinueOnError="false" />

    <Message Importance="high" Text="All tests:" />
    <Delete Files="$(TestOutputDirectory)\RTPreviewDebug.trx" />
    <Exec
      Command="MSTest.exe /testcontainer:$(AzureRTTestContainer) /testsettings:$(AzureRTTestSettings) /category:Preview /resultsfile:$(TestOutputDirectory)\RTPreviewDebug.trx"
      ContinueOnError="false" />
  </Target>

  <!-- Do everything possible -->
  <Target
    Name="Full"
    DependsOnTargets="ForceRestorePackages;Clean;BuildDebug;BuildReleaseSigned;Test;BuildSetupDebug;BuildSetup" />

  <!-- Run Full switch with scenario tests -->
  <Target
    Name="FullWithScenarioTests"
    DependsOnTargets="ForceRestorePackages;Clean;BuildDebug;BuildReleaseSigned;Test;BuildSetupDebug;BuildSetup;RunOneSDKCIT" />

  <!-- Build the Cmdlets in ReleaseSigned configuration -->
  <Target Name="BuildReleaseSigned" DependsOnTargets="ForceRestorePackages">
    <Message Importance="high" Text="Building Cmdlets in ReleaseSigned config..." />
    <MSBuild
      Projects="@(CmdletSln)"
      Targets="Build"
      Properties="$(ReleaseSignedBuildConfig)"
      ContinueOnError="false" />
  </Target>

  <!-- Build the Cmdlets in Debug configuration -->
  <Target Name="BuildDebug" DependsOnTargets="ForceRestorePackages">
    <Message Importance="high" Text="Building Cmdlets in Debug config..." />
    <MSBuild
      Projects="@(CmdletSln)"
      Targets="Build"
      Properties="$(DebugBuildConfig)"
      ContinueOnError="false" />
  </Target>
</Project>
